{"ast":null,"code":"import { fork, call, put } from 'redux-saga/effects';\nimport { errors, success, LOGIN } from '../actions/actionType'; // import { loginRequest } from '../api'\n\nimport axios from 'axios';\nexport function* loginRequestFlow(user) {\n  const apiCall = user => {\n    return axios.post('https://reqres.in/api/login/', user).then(response => response.data).catch(err => {\n      throw err;\n    });\n  };\n\n  try {\n    yield call(apiCall);\n    yield call(success(user));\n  } catch {\n    yield call(errors(user));\n  }\n}\nexport function* loginRequestFinal() {\n  yield call(LOGIN, loginRequestFlow);\n}\nexport function* rootSaga() {\n  yield fork(loginRequestFinal);\n}","map":{"version":3,"sources":["/Users/ling/Documents/GitHub/redux-middleware-login/src/saga/rootSaga.js"],"names":["fork","call","put","errors","success","LOGIN","axios","loginRequestFlow","user","apiCall","post","then","response","data","catch","err","loginRequestFinal","rootSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,KAA1B,QAAuC,uBAAvC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAUC,gBAAV,CAA2BC,IAA3B,EAAiC;AACpC,QAAMC,OAAO,GAAID,IAAD,IAAU;AACtB,WAAOF,KAAK,CAACI,IAAN,CAAW,8BAAX,EAA2CF,IAA3C,EACFG,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IADxB,EAEFC,KAFE,CAEIC,GAAG,IAAI;AACV,YAAMA,GAAN;AACH,KAJE,CAAP;AAKH,GAND;;AAQA,MAAI;AACA,UAAMd,IAAI,CAACQ,OAAD,CAAV;AACA,UAAMR,IAAI,CAACG,OAAO,CAACI,IAAD,CAAR,CAAV;AACH,GAHD,CAGE,MAAM;AACJ,UAAMP,IAAI,CAACE,MAAM,CAACK,IAAD,CAAP,CAAV;AAEH;AACJ;AAED,OAAO,UAAUQ,iBAAV,GAA8B;AACjC,QAAMf,IAAI,CAACI,KAAD,EAAQE,gBAAR,CAAV;AACH;AAED,OAAO,UAAUU,QAAV,GAAqB;AACxB,QAAMjB,IAAI,CAACgB,iBAAD,CAAV;AACH","sourcesContent":["import { fork, call, put } from 'redux-saga/effects'\nimport { errors, success, LOGIN } from '../actions/actionType'\n// import { loginRequest } from '../api'\nimport axios from 'axios'\n\nexport function* loginRequestFlow(user) {\n    const apiCall = (user) => {\n        return axios.post('https://reqres.in/api/login/', user)\n            .then(response => response.data)\n            .catch(err => {\n                throw err;\n            });\n    }\n\n    try {\n        yield call(apiCall)\n        yield call(success(user))\n    } catch {\n        yield call(errors(user))\n\n    }\n}\n\nexport function* loginRequestFinal() {\n    yield call(LOGIN, loginRequestFlow);\n}\n\nexport function* rootSaga() {\n    yield fork(loginRequestFinal)\n}\n"]},"metadata":{},"sourceType":"module"}